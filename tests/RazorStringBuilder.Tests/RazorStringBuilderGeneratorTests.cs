using System;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.Extensions.ObjectPool;
using Microsoft.NET.Sdk.Razor.SourceGenerators;
using ronimizy.RazorStringBuilder;
using ronimizy.RazorStringBuilder.Analyzers;
using Test.Tests.Utils;
using Xunit;
using Xunit.Abstractions;

namespace Test.Tests;

public class RazorStringBuilderGeneratorTests(ITestOutputHelper output)
{
    // private const string RazorFileText = """
    // select  id
    // @if (string.IsNullOrEmpty(Data) is false)
    // {
    //     @:, data
    // }
    // from table
    // where data like :data
    //
    // <CustomComponent/>
    //
    // @code {
    //     public required string? Data { get; set; }
    // }
    // """;

    private const string RazorFileText =
        "@inherits RazorStringBuilder\n\nupdate table\nset updated_at = now()\n@if (string.IsNullOrEmpty(Data) is false)\n{\n    @:, data = '@Data'\n    <div>\n        @Data\n    </div>\n    <div></div>\n    <div/>\n    <br/>\n}\nwhere id = :id\n\n@code {\n    public required string? Data { get; set; }\n}";

    private const string ExpectedGeneratedClassText = """
    // <auto-generated/>
    """;

    [Fact]
    public void GenerateReportMethod()
    {
        const string projectDir = "/user/sample/project";

        var generator = new RazorStringBuilderGenerator();
        var file = new TestAdditionalFile(Path.Combine(projectDir, "Aboba.sql.razor"), RazorFileText);

        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);
        driver = driver.AddAdditionalTexts([file]);

        driver = driver.WithUpdatedAnalyzerConfigOptions(new TestOptionsProvider(new TestOptions
        {
            ["build_property.ProjectDir"] = projectDir,
        })
        {
            [file] = new TestOptions
            {
                ["build_metadata.AdditionalFiles.TargetPath"] = Convert.ToBase64String(
                    Encoding.Default.GetBytes(file.Path)),
                
                ["build_metadata.AdditionalFiles.HintNamespace"] = "MyNamespace",
            },
        });

        var compilation = CSharpCompilation.Create(
            nameof(RazorStringBuilderGeneratorTests),
            references:
            [
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(RazorSourceGenerationOptions).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(ObjectPool).Assembly.Location),
            ]);

        var runResult = driver.RunGenerators(compilation).GetRunResult();

        foreach (var diagnostic in runResult.Diagnostics)
        {
            output.WriteLine(diagnostic.ToString());
        }

        var generatedFileSyntax = runResult.GeneratedTrees.SingleOrDefault(t => t.FilePath.EndsWith("Aboba.sql.cs"));

        Assert.Equal(
            ExpectedGeneratedClassText,
            generatedFileSyntax?.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}
